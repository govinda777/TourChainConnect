name: Smart Contracts CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'contracts/**'
      - '.github/workflows/smart-contracts.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'contracts/**'
      - '.github/workflows/smart-contracts.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Compile smart contracts
        run: npx hardhat compile
      
      - name: Run smart contract tests
        run: npx hardhat test
      
      - name: Generate code coverage report
        run: npx hardhat coverage
      
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
  
  security-analysis:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Install Slither
        run: |
          pip3 install slither-analyzer
          pip3 install solc-select
          solc-select install 0.8.20
          solc-select use 0.8.20
      
      - name: Run Slither
        run: slither contracts --exclude-informational --exclude-low
      
      - name: Run Mythril security analysis
        run: |
          pip3 install mythril
          myth analyze contracts/tokens/TourToken.sol --solc-json mythril.config.json
          myth analyze contracts/tokens/TourStaking.sol --solc-json mythril.config.json
          myth analyze contracts/crowdfunding/TourCrowdfunding.sol --solc-json mythril.config.json
          myth analyze contracts/oracles/TourOracle.sol --solc-json mythril.config.json
          myth analyze contracts/sustainability/CarbonOffset.sol --solc-json mythril.config.json

  deploy-testnet:
    needs: [test, security-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Setup environment
        run: |
          echo "DEPLOYER_PRIVATE_KEY=${{ secrets.DEPLOYER_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "SEPOLIA_RPC_URL=${{ secrets.SEPOLIA_RPC_URL }}" >> $GITHUB_ENV
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> $GITHUB_ENV
      
      - name: Deploy to Sepolia testnet
        run: npx hardhat run contracts/scripts/deploy-all.ts --network sepolia
      
      - name: Verify contracts on Etherscan
        run: |
          npx hardhat verify --network sepolia $(cat deployed-contracts.json | jq -r '.tourToken')
          npx hardhat verify --network sepolia $(cat deployed-contracts.json | jq -r '.tourStaking') $(cat deployed-contracts.json | jq -r '.tourToken')
          npx hardhat verify --network sepolia $(cat deployed-contracts.json | jq -r '.tourCrowdfunding') $(cat deployed-contracts.json | jq -r '.tourToken') 250 $(cat deployed-contracts.json | jq -r '.feeCollector')
          npx hardhat verify --network sepolia $(cat deployed-contracts.json | jq -r '.tourOracle')
          npx hardhat verify --network sepolia $(cat deployed-contracts.json | jq -r '.carbonOffset') $(cat deployed-contracts.json | jq -r '.tourToken') $(cat deployed-contracts.json | jq -r '.tourOracle')
      
      - name: Save deployment information
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info
          path: deployed-contracts.json

  deploy-mainnet:
    needs: [deploy-testnet]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && startsWith(github.event.head_commit.message, 'PROD:')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Setup environment
        run: |
          echo "DEPLOYER_PRIVATE_KEY=${{ secrets.MAINNET_DEPLOYER_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "MAINNET_RPC_URL=${{ secrets.MAINNET_RPC_URL }}" >> $GITHUB_ENV
          echo "ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}" >> $GITHUB_ENV
      
      - name: Confirm Mainnet Deployment
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Approve Mainnet Deployment"
          issue-body: "Please approve the deployment of smart contracts to Ethereum Mainnet."
          exclude-workflow-initiator-as-approver: false
      
      - name: Deploy to Ethereum Mainnet
        run: npx hardhat run contracts/scripts/deploy-all.ts --network mainnet
      
      - name: Verify contracts on Etherscan
        run: |
          npx hardhat verify --network mainnet $(cat deployed-contracts.json | jq -r '.tourToken')
          npx hardhat verify --network mainnet $(cat deployed-contracts.json | jq -r '.tourStaking') $(cat deployed-contracts.json | jq -r '.tourToken')
          npx hardhat verify --network mainnet $(cat deployed-contracts.json | jq -r '.tourCrowdfunding') $(cat deployed-contracts.json | jq -r '.tourToken') 250 $(cat deployed-contracts.json | jq -r '.feeCollector')
          npx hardhat verify --network mainnet $(cat deployed-contracts.json | jq -r '.tourOracle')
          npx hardhat verify --network mainnet $(cat deployed-contracts.json | jq -r '.carbonOffset') $(cat deployed-contracts.json | jq -r '.tourToken') $(cat deployed-contracts.json | jq -r '.tourOracle')
      
      - name: Save deployment information
        uses: actions/upload-artifact@v3
        with:
          name: mainnet-deployment-info
          path: deployed-contracts.json